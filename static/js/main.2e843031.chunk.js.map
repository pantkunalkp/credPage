{"version":3,"sources":["utils/Processing.js","components/StatsCard.jsx","components/BackDrop.jsx","graphQL/Mutaions.js","components/Modal.jsx","utils/AcceptedFormats.js","App.js","reportWebVitals.js","index.js"],"names":["SSFToDate","serial","utc_days","Math","floor","date_info","Date","fractional_day","total_seconds","getFullYear","getMonth","getDate","processRows","data","totalVendors","validEntries","Set","totalEntries","length","totalAmount","vendors","today","totalValid","map","row","invoiceNo","docNo","docDate","netDueDate","amount","postingDate","type","vendorCode","vendorName","vendorType","filter","has","add","toString","size","useStyles","makeStyles","root","minWidth","maxWidth","title","fontSize","StatsCard","value","classes","Card","className","CardContent","Typography","color","gutterBottom","variant","component","BackDrop","style","width","height","backgroundColor","display","justifyContent","alignItems","position","top","left","zIndex","CircularProgress","ADD_INVOICE","gql","Transition","React","forwardRef","props","ref","Slide","direction","Modal","isOpen","callback","file","useState","setData","rows","setRows","uploading","setUploading","uploaded","setUploaded","message","setMessage","useMutation","addInvoice","useEffect","reader","FileReader","onload","e","a","bstr","target","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","readAsBinaryString","readFile","console","log","handleClose","handleSubmit","setTimeout","Promise","all","invoice","variables","then","catch","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","Grid","container","spacing","Object","entries","item","DialogActions","Button","onClick","disabled","SheetJSFT","x","join","App","setFile","setOpen","onDrop","acceptedFiles","useDropzone","getRootProps","getInputProps","isDragActive","accept","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e843031.chunk.js","sourcesContent":["function SSFToDate(serial) {\n   var utc_days  = Math.floor(serial - 25569);\n   var utc_value = utc_days * 86400;                                        \n   var date_info = new Date(utc_value * 1000);\n   var fractional_day = serial - Math.floor(serial) + 0.0000001;\n   var total_seconds = Math.floor(86400 * fractional_day);\n   var seconds = total_seconds % 60;\n   total_seconds -= seconds;\n   return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate());\n}\n\nconst processRows = (data) => {\n    if(data) {\n        let validEntries = new Set();\n        let totalEntries = data.length;\n        let totalAmount = 0;\n        let vendors = new Set();\n        let totalVendors = 0;\n        let today = new Date()\n        data =  data.map( row => ({\n            invoiceNo: row[\"Invoice Numbers\"],\n            docNo: row[\"Document Number\"],\n            docDate: SSFToDate(row[\"Doc. Date\"]),\n            netDueDate: SSFToDate(row[\"Net due dt\"]),\n            amount: row[\"Amt in loc.cur.\"],\n            postingDate: SSFToDate(row[\"Pstng Date\"]),\n            type: row[\"Type\"],\n            vendorCode: row[\"Vendor Code\"],\n            vendorName: row[\"Vendor name\"],\n            vendorType: row[\"Vendor type\"]\n        })).filter( row => row.docDate <= today && row.netDueDate > today );\n        let totalValid = data.length;\n\n        data = data.filter(row => {\n            if(validEntries.has(row.invoiceNo)) {\n                return false;\n            } \n            validEntries.add(row.invoiceNo);\n            vendors.add(row.vendorName);\n            totalAmount += row.amount;\n            row.docDate = row.docDate.toString()\n            row.netDueDate = row.netDueDate.toString()\n            row.postingDate = row.postingDate.toString()\n            return true\n        });\n        totalVendors = vendors.size;\n        let totalDuplicates = totalValid - data.length;\n        \n        let stats = {\n            \"Total Entries\": totalEntries, \n            \"Total Valid Entries\": totalValid, \n            \"Total Duplicates\": totalDuplicates, \n            \"Total Amount\": totalAmount, \n            \"Total Vendors\": totalVendors\n        }\n        return [ data, stats];\n    }\n    return null\n}\n\n\nexport default processRows;\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 150,\n    maxWidth: 200\n  },\n  title: {\n    fontSize: 14,\n  }\n});\n\nconst StatsCard = ({title, value}) => {\n    const classes = useStyles();\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                {title}\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                {value}\n                </Typography>\n                \n            </CardContent>\n        </Card>\n    )\n}\n\nexport default StatsCard\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst BackDrop = () => {\n    const styles = {\n        width: '100vw',\n        height: '100vh',\n        backgroundColor: '#00000063',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        zIndex: 99999\n    }\n    return (\n        <div style = {styles}>\n            <CircularProgress />\n        </div>\n    )\n}\n\nexport default BackDrop\n","import { gql } from '@apollo/client';\n\nexport const ADD_INVOICE = gql`\n    mutation AddInvoice($invoice: InvoiceInput!) {\n        addInvoice(invoice: $invoice) {\n            invoiceNo\n        }\n    }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport XLSX from \"xlsx\";\nimport processRows from \"../utils/Processing\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport StatsCard from \"./StatsCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport BackDrop from \"./BackDrop\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_INVOICE } from \"../graphQL/Mutaions\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst Modal = ({ isOpen, callback, file }) => {\n  const [data, setData] = useState(null);\n  const [rows, setRows] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploaded, setUploaded] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [addInvoice] = useMutation(ADD_INVOICE);\n\n  const readFile = () => {\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\", bookVBA: true });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      await setData(data);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  useEffect(() => {\n    if (file) {\n      readFile();\n    }\n  }, [file]);\n\n  useEffect(() => {\n    if (rows === null) {\n      setRows(processRows(data) ? processRows(data) : null);\n      console.log(rows);\n    }\n  }, [rows, data]);\n  const handleClose = () => {\n    setData(null);\n    setRows(null);\n    callback();\n  };\n\n  const handleSubmit = async () => {\n    setUploading(true);\n    await setTimeout(() => {\n      Promise.all(\n        rows[0].map((invoice) => addInvoice({ variables: { invoice } }))\n      )\n        .then((result) => {\n          setUploaded(true);\n          setUploading(false);\n          console.log(result);\n          setMessage(\"Great You are Done\");\n        })\n        .catch((e) => {\n          setMessage(\"Some Files Failed to Upload, Please Retry\");\n          setUploading(false);\n        });\n    });\n  };\n  return (\n    <Dialog\n      open={isOpen}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">Statistics</DialogTitle>\n      {uploading ? <BackDrop /> : \"\"}\n      <DialogContent>\n        {file && data && rows ? (\n          <Grid container spacing={2}>\n            {Object.entries(rows[1]).map((item) => (\n              <Grid item>\n                <StatsCard title={item[0]} value={item[1]} />\n              </Grid>\n            ))}\n          </Grid>\n        ) : (\n          <CircularProgress />\n        )}\n        {message ? <p>{message}</p> : \"\"}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={handleSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={uploaded}\n        >\n          {uploaded ? \"Done\" : \"Upload\"}\n        </Button>\n        <Button onClick={handleClose} variant=\"contained\" color=\"secondary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","const SheetJSFT = [\n\t'xlsx',\n\t'xlsb',\n\t'xlsm',\n\t'xls',\n\t'csv',\n\t'wb*',\n\t'wq*',\n].map(x => '.' + x).join(',');\n\nexport default SheetJSFT","import React, { useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport \"./App.css\";\nimport Modal from \"./components/Modal.jsx\";\nimport SheetJSFT from \"./utils/AcceptedFormats\";\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [open, setOpen] = useState(false);\n  const onDrop = async (acceptedFiles) => {\n    if (acceptedFiles && acceptedFiles[0]) {\n      await setFile(acceptedFiles[0]);\n      await setOpen(true);\n    }\n  };\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div className=\"app\">\n      <div {...getRootProps({ className: \"drop-area\" })}>\n        <input {...getInputProps({ accept: SheetJSFT })} />\n        {isDragActive ? (\n          <h1>Great! You can drop the click now</h1>\n        ) : (\n          <h1>Drag or Browse Your File!</h1>\n        )}\n      </div>\n      <Modal isOpen={open} callback={() => setOpen(false)} file={file} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, ApolloLink, gql } from '@apollo/client';\n \nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}